JNI方法注册分为静态注册和动态注册，其中静态注册多用于NDK开发，而动态注册多用于Framework开发。

一.静态实现方法
1.先实现一个JAVA类
在这里实现一个HellJNI类加载一个hello的JNI接口
-------------------------------------------------------------
public class HelloJNI {
   static {
      System.loadLibrary("hello"); // Load native library at runtime
                                   // hello.dll (Windows) or libhello.so (Unixes)
   }

   // Declare a native method sayHello() that receives nothing and returns void
   private native void sayHello();

   // Test Driver
   public static void main(String[] args) {
      new HelloJNI().sayHello();  // invoke the native method
   }
}
-------------------------------------------------------------

2.我们使用JAVA来编译出.class文件
 javac HelloJNI.java

3.生成C/C++文件
 javah HelloJNI

HelloJNI.h文件
-------------------------------------------------------------
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class HelloJNI */

#ifndef _Included_HelloJNI
#define _Included_HelloJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     HelloJNI
 * Method:    sayHello
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_HelloJNI_sayHello(JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
-------------------------------------------------------------
1. JNIEnv *：这是一个指向JNI运行环境的指针，后面我们会看到，我们通过这个指针访问JNI函数
2. jobject：这里指代java中的this对象
-------------------------------------------------------------

二.动态注册实现方法
JNI中有一种结构用来记录Java的Native方法和JNI方法的关联关系，它就是JNINativeMethod

